// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TurnipTracker.Models;

namespace TurnipTracker.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200806182448_ThirdMigration")]
    partial class ThirdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TurnipTracker.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<bool>("NeedsMembershipApproval");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TurnipTracker.Models.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AcceptedToGroup");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GroupId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("MembershipId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("TurnipTracker.Models.Trend", b =>
                {
                    b.Property<int>("TrendId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BigSpike");

                    b.Property<int?>("BuyPrice");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<float>("Decreasing");

                    b.Property<float>("Fluctuating");

                    b.Property<int?>("FriAM");

                    b.Property<int?>("FriPM");

                    b.Property<bool>("KnownTrend");

                    b.Property<int?>("MonAM");

                    b.Property<int?>("MonPM");

                    b.Property<int?>("SatAM");

                    b.Property<int?>("SatPM");

                    b.Property<float>("SmallSpike");

                    b.Property<int?>("ThurAM");

                    b.Property<int?>("ThurPM");

                    b.Property<int?>("TueAM");

                    b.Property<int?>("TuePM");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.Property<int?>("WedAM");

                    b.Property<int?>("WedPM");

                    b.HasKey("TrendId");

                    b.HasIndex("UserId");

                    b.ToTable("Trends");
                });

            modelBuilder.Entity("TurnipTracker.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("IslandLink");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TurnipTracker.Models.Group", b =>
                {
                    b.HasOne("TurnipTracker.Models.User", "Owner")
                        .WithMany("GroupsMade")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TurnipTracker.Models.Membership", b =>
                {
                    b.HasOne("TurnipTracker.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TurnipTracker.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TurnipTracker.Models.Trend", b =>
                {
                    b.HasOne("TurnipTracker.Models.User", "TrendOwner")
                        .WithMany("Trends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
